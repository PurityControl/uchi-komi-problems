#+TITLE: Problem Set for Uchi Komi Repos

* Introduction
In order to prevent the uchikomi problems being duplicated across all of the
different uchikomi language repos, the problem set has been extracted out
into its own repo. This means a new problem only has to be added to this
repo rather than across all of the different uchikomi language implementations.

This repo will explain how the uchikomi language repos are structured.
it will also contain all the problem set descriptions to be implemented in
each uchi komi language repo.

* Gokyo

Each repo has a docs folder that breaks up aspects of the language into five
sets. These are detailed below

- [[file:doc/ikkyo.org][Dai-ikkyo]] - Settng up the environment
- [[file:doc/nikyo.org][Dai-nikyo]] - Testing
- [[file:doc/sankyo.org][Dai-sankyo]] - Resources / Cheat Sheets
- [[file:doc/yonkyo.org][Dai-yonkyo]] - Workflows
- [[file:doc/gokyo.org][Dai-gokyo]] - Documentation

* Problems

There is a problem folder and there are additional folders underneath the
problems folder for different types of problem or different websites that
host problems.

The euler problems are from [[https://projecteuler.net/][Project Euler]].

The rq problems are from the [[http://rubyquiz.com/index.html][Ruby Quiz]] site.

The alg folder has problems surrounding common algorithms such as binary search.

The kata folder is dedicated to useful problem spaces I have come
across that would make good katas. The main criteria for these
exercises are that they will be of sufficient length to be more than a
trivial problem but short enough to be able to work on over a sitting.
The idea of these exercises are for you to create the project
infrastructure for your language properly and to follow the practices
you want to become second natures such as tdd, and the red, green
refactor cycles. These are opportunities to ensure your best practices
become engrained so don't waste them. If it means taking your time
painstakingly analysing your workflow until it starts to become
engrained then make sure you do this. Further be prepared to do these
exercises again and again, remember that the focus here is much more
on following a best practice than trying to solve a particular problem.

** Retrospective
With all but the most simple of problems try to do a retrospective.
Create a file in the problem directory called retrospective.org and
detail any insights or interesting parts of the problem. Highlighting
areas that were difficult or situations in which the language made
something useful is also helpful.
